Chapter 1: Pleasing your customer.

The two major concerns of customers are, how much it costs to build and how long it'll take to build.
there is an illustration of how how devs crank out code and not get any feedback from the customer until it is almost deadline and the customer,
more often than not, the customer isn't thrilled with the work done, sometimes called big bang devlopment. How do you  know what the customer wants?

Software development is not guess work, it is important to keep customers in the loop of what you are building.
When in doubt, ask questions! even when you're sure, ask questions. its difficult for customers to know what they want in the beginning of the project, your questions are what inadvertedly guides their decision making on the routes the project takes. 

Great software development delivers, what is needed, on time and on budget.

The secret is iteration. with iteration, each time significant progress is made, you check back with the customer and refine what you are doing to align with their vison, You also do not make any major decisions without the input of the customer.Iteration is like a frequent checkup for your software, You'll always know how you're doing.

NOTE QUESTION 3 ON PAGE 48, VERY IMPORTANT!!!!

With the big bang approach, working software is not actualized until when the project is completed which is a really really bad time to find out you've gone wrong. Iteration produces working software, working software can mean several things, from a functional button to a full web page, all depends on the conversations had between you and your customer.

Each iteration is a mini project. You take the steps you'd follow to build the entire project and put those into each iteration, each iteration has its own requirements, design, code, tests etc, so we are not showing the user junk but pieces of the final software.

Each iteration is quality software. they are little cycles that encompass, requirement gathering, design, code and testing.

It is important that your iteration length should be the right tempo for your project. the key here is to iterate enough to catch yourself deviating from the requirements but not so often that takes all your attention because in the end, iteration is a tool to help you, it is not the  goal or the software you are building.

How do you handle when the customer changes things, say maybe discovers a new set of priority features that should be added to the list of feature with priority as well? its up to us to make the necessary adjustment. Iteration handles chage automatically
1. estimate new features, the time needed to build it.
2. order of priority, which is important and which needs most attention
3. rework the iteration plan, fix the most important features in the right places on your feature board
4. check the project deadline.



CHAPTER TWO: Gathering Requirements. Knowing what the customer wants.

It is important to note that as developers we can't always get what we wan, but the customer should, 100%.
The first step ensures that we are able to get the things that the user wants their service to provide, an example is this:
"Build a web app that allows users manage their financies, by allowing them deposit money,  pay their electricity bills, data subscriptions, save and invest".
from this we pick out the individual feature that the web app is expected to have, note at this stage, we are only gathering ideas.

1. Allows users manage their finances, allowing for deposits.
2. Allows users to pay their electricity bills.
3. Allows users to pay for data subscriptions.
4. Allows user the ability to save money
5. Allows users to invest in different ventures.

Remember these are not real requirements, just thoughts on what the software is expected to render as services to the users.

TALK MORE WITH YOUR CUSTOMER TO GET MORE INFORMATION.
Ask questions, in this case, what banking service will be used to recieve money? what electricity serivce companies do we intend to support? how much interest is the savings accumulating over how long? which investment platforms do we integrate?, how long does an investment last for? do we automate it or allow the users full autonomy on their investments?

there are so many questions to be asked of the users about how they intend to perform these actions, and those questions generate more requirements. 
iterate with the customer on requirements, brainstorm with as many people as possible, don't rule out any ideas in the beginning, capture everything.

if brainstorming together is not working, then do it individually, put everyone's idea on a board and then do it together after.

Some useful techniques in figuring out what the customer wants is ROLE PLAYING and OBSERVATION.

Role Playing: the concept is to basically pretend like you are the software and vocally interact with the customer as regards what they need.
the customer gets to instruct you on what they would like to do,and then you write it down as requirements.

Observation: this involves understanding how people will work with the software by watching them and figuring out where your software solution fits in, observe the same informtion with multiple observers to have different perspective to figure out as many requirements as possible.